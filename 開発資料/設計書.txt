1. 画面設計（UI）
画面要素	内容
レシピ選択	プルダウン or 検索欄
生産量入力	数値入力欄（「分あたり30個」など）
計算ボタン	クリックで再帰的に生産チェーン計算
生産ツリー表示	ツリー形式で素材と必要数、設備をインデント付き表示
設備選択欄	各素材ごとに対応設備を選択可能（プルダウン）
台数表示	必要な設備台数（整数）と合計

2. データフロー設計
入力：

    data.json（レシピ・アイテム・カテゴリ）

    machine.json（カテゴリと設備速度の対応）

    ユーザー入力（アイテム名、個数、設備選択）

出力：

    GUI表示（素材一覧、生産チェーン、設備台数など）

    ログ（ターミナル出力）

3. 機能別処理概要（モジュール設計）
モジュール名	処理概要
gui_controller.py	tkinterベースのUI構築。イベントハンドリング処理など
data_loader.py	data.json / machine.jsonを読み込み、辞書型に変換
production_tree.py	選択レシピに基づいて再帰的に素材を分解し、階層構造を構築
equipment_selector.py	各カテゴリに対応する設備一覧を提供し、選択肢を制御
calculator.py	設備台数の計算、合計台数の集計

4.データ構造定義
別ファイル参照 (データ構造定義.txt)

5.処理フロー図（再帰的素材分解）

    生産したいアイテムと個数を入力

    レシピを取得 → 素材と時間を確認

    素材が中間製品であれば再帰的にレシピ取得

    必要数を加算・計算

    各素材に対して使用可能な設備を表示

    設備を選択 → 台数計算（time × amount / speed）

    合計設備数を集計 → GUI表示

6.エラー設計

存在しないレシピが入力された場合	「レシピが見つかりません」
machine.jsonに対応設備がない場合	「カテゴリに対応する設備が見つかりません」

7.テスト方針（概要）

    単体テスト：各モジュールの出力確認（再帰処理・設備計算など）

    結合テスト：GUI操作から結果表示までの一連確認