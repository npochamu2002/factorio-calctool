1. テストの目的

本テストは、ユーザー入力からの生産チェーン計算、設備選択、台数算出、GUI表示などが
仕様通りに動作することを確認し、品質を保証することを目的とする。

2. テスト対象

    GUI画面（tkinter）

    生産チェーンの再帰計算モジュール

    設備台数の計算ロジック

    データ読み込み（data.json, machine.json）

    エラーメッセージ表示処理

3. テストの種類と範囲
テスト種別	対象	実施内容
単体テスト	各関数・クラス	入出力の検証、例外処理
結合テスト	GUI＋ロジック	画面操作→計算→出力までの流れ
シナリオテスト	ユーザーフロー	アイテムを選び設備を選択して計算
異常系テスト	入力/データ	存在しないレシピ、不正値など

4.テスト項目

1	レシピ選択	レシピドロップダウンに全レシピが表示される	GUI起動後、ドロップダウンが正しくリストされているか目視確認
2	レシピ選択	任意のレシピを選ぶと、その素材ツリーが階層表示される	レシピ「green-science-pack」を選び、素材構成が階層的に表示されるか
3	レシピ検索	検索ボックスで部分一致検索ができる	「gear」と入力 → 「iron-gear-wheel」などが候補に表示されるか
4	レシピ階層表示	階層ごとにインデントと背景色が変化する	GUI上で素材階層が見やすく色分けされているか
5	データ読み込み	data.jsonが正しく読み込まれる	ログ（またはprint）でレシピ数、アイテム数を確認
6	データ読み込み	machine.jsonが正しく読み込まれる	GUIに設備が正しく表示され、カテゴリごとに合致しているか確認
7	設備選択	カテゴリに対応した設備のみが表示される	craftingカテゴリでは「Assembler 1〜3」だけ表示されるか目視確認
8	設備変更	GUI上で設備を変更すると計算に反映される	設備を「Assembler 2」→「Assembler 3」に変更後、台数が変わるか確認
9	台数計算	必要数・速度から設備台数が正しく計算される	レシピ：Iron gear wheel 60個/分 → 出力台数が整数で表示されるか
10	台数合計	各設備カテゴリごとの合計台数が正しく表示される	すべての装置の台数が集計される欄で正しいか
11	エラー処理	存在しないレシピ名を入力した場合の挙動	「unknown-item」などを入力 → エラーダイアログや無反応か確認
12	エラー処理	入力を空欄にして「計算」ボタンを押す	「入力してください」などのエラーメッセージが出るか
13	UI動作	スクロールやウィンドウサイズ変更時に表示が崩れない	階層が多い素材で画面をスクロール → 表示崩れないか確認
14	UI操作	計算ボタンがクリック可能で反応する	ボタン押下で新しい結果が即座に反映されるか
15	起動確認	Pythonスクリプトがエラーなく起動する	python main.py で正常起動
16	終了処理	閉じる操作で安全に終了する	GUI右上の☓ボタンでクラッシュせず閉じるか

結果

1 合格 リストされたレシピを確認
2 合格 素材構成が階層化され表示されることを確認
3 合格 完全一致、部分一致検索が可能なことを確認
4 合格 複雑なレシピや中間素材の多いレシピでもインデントと背景色の変化を確認
5 合格 data.jsonの中身と一致したことを確認
6 合格 machine.jsonの中身と一致したことを確認 カテゴリごとに分かれているのも確認
7 合格 レシピによって対応する設備が変化したことを確認
8 合格 手で計算してみて結果の一致を確認
9 合格 変更し、計算結果が変わったことと、計算結果の整合性がとれていることを確認
10 合格 手で計算してみて結果の一致を確認
11 合格 空欄になり、アイテムが選択できない状態になることを確認
12 合格 レシピを入力してください、というエラーメッセージを確認
13 合格 表示崩れなし(ウィンドウサイズによっては文字がすべて表示されないことを確認)
14 合格 複雑なレシピでも即座に結果が切り替わることを確認
15 合格 確認
16 合格 確認